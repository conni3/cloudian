<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Language Concepts on Cloudian</title>
    <link>http://localhost:1313/posts/system-verilog/language-concepts/</link>
    <description>Recent content in Language Concepts on Cloudian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2025 Connie</copyright>
    <atom:link href="http://localhost:1313/posts/system-verilog/language-concepts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Data Type: Logic</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/logic-data-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/logic-data-type/</guid>
      <description>SystemVerilog introduces logic as a 4-state data type that can be assigned in initial, always, or always_comb blocks.</description>
      
    </item>
    
    <item>
      <title>Data Type: Nets</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/nets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/nets/</guid>
      <description>Nets model physical connections between drivers. When you have multiple drivers</description>
      
    </item>
    
    <item>
      <title>Data Types</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/data-types/</guid>
      <description>1. Net Types (4-state, driven by continuous assignments) # wire</description>
      
    </item>
    
    <item>
      <title>draft</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/confused-topics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/confused-topics/</guid>
      <description>ports getting and passing parameters fork … join definition of: non-zero simulation-time constructs ] so you can only choose output&amp;rsquo;s type (whether variable or net)</description>
      
    </item>
    
    <item>
      <title>Ports</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/ports/</guid>
      <description>Every module or interface exposes a list of ports - points of connection where signal, handshakes or buses flow in and out.</description>
      
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/roadmap/</guid>
      <description>Language Basics
1.1. Lexical conventions: identifiers, comments (//, /*…*/), white space</description>
      
    </item>
    
    <item>
      <title>Tasks vs Functions</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/tasks-vs-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/tasks-vs-functions/</guid>
      <description>Both functions and tasks are subroutines that are reusable RTL or testbench codes.</description>
      
    </item>
    
  </channel>
</rss>


[{"content":"","date":"20 May 2025","externalUrl":null,"permalink":"/tags/calas/","section":"Tags","summary":"","title":"Calas","type":"tags"},{"content":"","date":"20 May 2025","externalUrl":null,"permalink":"/","section":"Cloudian","summary":"","title":"Cloudian","type":"page"},{"content":"\rMotivation for the internship: #\rIn the long term future, I really want to become a researcher in the future. It might come from trying to be enough or even feel better. But I really do want to become someone I can be proud of and someone who grows everyday.\nThis might be a bit of a rocky road and I keep hearing that from a lot of people and sometimes I get scared, but there are also people who support me. So I am willing to give it a try.\nBack to the topic of this internship specifically, the main goal is that I build a processor.\nHere is what I am hoping to gain from doing that:\nAlthough I had the digital logic circuit class, I have noticed that I have forgotten a lot of the materials in a little over semester. This made me quite sad. All in all, will review FPGAs. Would like to learn computer architecture. I haven\u0026rsquo;t taken a computer architecture or organization course yet (core course in the degree but an elective, which is very odd since I am doing a computer engineering degree) Timeline #\rWeeks 1-3 FPGA design #\rWeek 1: Environment \u0026amp; Basics #\rSetting up Vitis Review Verilog syntax and some combinational circuits Building testbench for simulation Week 2: Core modules #\rDesign and verify an n-bit ALU (add, subtract and logic operations) Implement a simple register file Integrate ALU + simple register file Week 3: Synthesis and Testing on board #\rSynthesize the design on PYNQ-Z2 Write constraints Load the bitstream and run I/O tests Document timing results and resource utilization Weeks 4-6 Computer architecture #\rWeek 4: Instruction set architecture #\rRead up on ISA concepts (RISC vs CISC, datapath components) Explore the RISC-V base spec Draw a simplified datapath diagram Week 5: Pipelining \u0026amp; Control #\rLearn pipeline stages and hazards Simulate a 5-stage pipeline in software Implement hazard detection \u0026amp; forwarding logic on paper Week 6: Memory \u0026amp; I/O #\rStudy memory hierarchy (registers, cache, main memory) Model a cache in simulation (measure hit/miss rates) Review basic I/O interfacing (memory vs port mapped) Weeks 7-9 Implementing RISC V architecture #\rWeek 7: Core Integer Pipeline #\rTranslate the simulated pipeline into HDL modules Implement fetch-decode-execute stages in Verilog Week 8: Completing the Pipeline #\rAdd MEM and WB stages; integrate control signals Test a small instruction sequence on the FPGA Week 9: Extensions and Testing #\rImplement branches and simple control/status registers Develop a test suite Measure and document performance Weeks 10-12 Improvement and Further Research #\rWeek 10: Optimization #\rAdd hazard reduction features (branch prediction, deeper pipelines) Profile performance improvements Week 11: Advanced Features #\rExplore floating-point or vector extensions Prototype an exception/interrupt handler Week 12: Documentation and Demo #\rPrepare a design report Recording a demo of the processor Identify open questions for future work ","date":"20 May 2025","externalUrl":null,"permalink":"/posts/internship-timeline/","section":"Posts","summary":"Motivation for the internship: #\rIn the long term future, I really want to become a researcher in the future. It might come from trying to be enough or even feel better.","title":"Internship Timeline","type":"posts"},{"content":"","date":"20 May 2025","externalUrl":null,"permalink":"/tags/learning_log/","section":"Tags","summary":"","title":"Learning_log","type":"tags"},{"content":"","date":"20 May 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"19 May 2025","externalUrl":null,"permalink":"/posts/learning-logs/","section":"Posts","summary":"","title":"Learning Logs","type":"posts"},{"content":"This was my first day of the internship. We started the day with a meeting where all the CALAS members gathered and some were sharing their progress on their current research. I was able to grasp the general meaning but couldn\u0026rsquo;t understand the finer details.\nAfter that, I introduced myself to the members there. It was nice meeting them.\nWeek 1 Learning Log (May 19â€“23, 2025) #\r1. Objectives #\rGrasp FPGA internal architecture: CLBs, LUTs, and on-chip SRAM/Block RAM Install and configure Vivado/Vitis on Windows Implement and simulate basic arithmetic primitives: Half Adder (half_adder.v) Full Adder (full_adder.v) 4-bit Carry Propagation Adder (prop_adder) 2. Daily Activities #\rðŸ“… Mon, May 19 #\rReviewed FPGA architecture:\nCLB = LUT + multiplexer + flip-flops + block RAM (SRAM-based)\nAlso looked at programmable interconnects.\nCreated internship timeline\nðŸ“… Tue, May 20 #\rDownloaded and ran AMD Unified Installer (Vivado \u0026amp; Vitis 2022.2)\nConfigured WebPACK license and environment\nðŸ“… Wed, May 21 #\rWrote half_adder.v and testbench Half_Adder_tb.v\nRan behavioral simulation in XSim to verify sum/carry truth table\nðŸ“… Thu, May 22 #\rImported half_adder into new project\nAdded full_adder.v and Full_Adder_tb.v\nSimulated full-adder behavior\nExtended to 4-bit prop_adder using IP Integrator\nðŸ“… Fri, May 23 #\rRan synthesis for all designs\nAnalyzed LUT utilization and CLB mapping\nWrote blog posts on:\nSRAMs (how cells store truth tables)\nBistable Flip-Flops\nLUTs\n3. Key Learnings #\rConfigurable Logic Block (CLB): core building block comprising LUTs, muxes, flip-flops for implementing user logic Look-Up Tables (LUTs): small SRAM-based memory (e.g., 4- to 6-input) that encodes combinational logic; viewed utilization post-synthesis Block RAM (SRAM): larger on-chip SRAM blocks for data storage/state machines within designs Vivado Flow: project setup â†’ HDL source \u0026amp; test-bench creation â†’ simulation (XSim) â†’ synthesis/implementation â†’ bitstream generation Arithmetic Modules: Half Adder: sum = a ^ b, carry = a \u0026amp; b Full Adder: cascaded half-adders with carry-in/out 4-bit Carry Propagation Adder: chain of four full-adder blocks (prop_adder) 4. Next Steps (Week 2) #\rTest hardware on Zedboard: program bitstreams for half, full, and prop_adder designs Dive into Vivado IP Integrator: automate block-design for multi-bit adders Begin drafting a simple ALU control module and integrate adders ","date":"19 May 2025","externalUrl":null,"permalink":"/posts/learning-logs/week-1/","section":"Posts","summary":"This was my first day of the internship. We started the day with a meeting where all the CALAS members gathered and some were sharing their progress on their current research.","title":"Week 1","type":"posts"},{"content":"","date":"13 June 2022","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]
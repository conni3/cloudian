<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloudian</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Cloudian</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2025 Connie</copyright>
    <lastBuildDate>Fri, 20 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Part 1: Foundations &amp; “Eight Great Ideas”</title>
      <link>http://localhost:1313/posts/computer-organization/patterson--hennessy-2020/chapter-1/part-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/computer-organization/patterson--hennessy-2020/chapter-1/part-1/</guid>
      <description>Preface # The preface starts with a motivation to read this book - professionals of every computing specialty should understand both hardware and software.</description>
      
    </item>
    
    <item>
      <title>Part 2: Inside the Machine – Abstraction Layers &amp; Technologies</title>
      <link>http://localhost:1313/posts/computer-organization/patterson--hennessy-2020/chapter-1/part-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/computer-organization/patterson--hennessy-2020/chapter-1/part-2/</guid>
      <description>Below Your Program # For computers to run complex applications, there needs to be some sort of translation.</description>
      
    </item>
    
    <item>
      <title>Part 3: Performance, Power &amp; the “Sea Change”</title>
      <link>http://localhost:1313/posts/computer-organization/patterson--hennessy-2020/chapter-1/part-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/computer-organization/patterson--hennessy-2020/chapter-1/part-3/</guid>
      <description>Performance # When you are choosing a computer, how should you choose?</description>
      
    </item>
    
    <item>
      <title>07-contributing-and-versioning</title>
      <link>http://localhost:1313/posts/rvsvkit/07-contributing-and-versioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/rvsvkit/07-contributing-and-versioning/</guid>
      <description>Contributing &amp;amp; Versioning # This document outlines how to contribute to RVSvKit, our branching and release policies, and our roadmap for future enhancements.</description>
      
    </item>
    
    <item>
      <title>Part 4: Real-World Examples &amp; Wrap-Up</title>
      <link>http://localhost:1313/posts/computer-organization/patterson--hennessy-2020/chapter-1/part-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/computer-organization/patterson--hennessy-2020/chapter-1/part-4/</guid>
      <description>Benchmarking the Intel Core I7 # SPEC CPU Benchmark # If you had 2 computers, how would you know one of them performed better than the other?</description>
      
    </item>
    
    <item>
      <title>06-automation-optimization</title>
      <link>http://localhost:1313/posts/rvsvkit/06-automation-optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/rvsvkit/06-automation-optimization/</guid>
      <description>Automation &amp;amp; Optimization # This document describes the scaffolding tools, CI/CD automation, parameter sweeps, RTL optimization guidelines, and static-analysis reporting for RVSvKit, consistent with Overview and Module Inventory.</description>
      
    </item>
    
    <item>
      <title>05-ci-and-testing</title>
      <link>http://localhost:1313/posts/rvsvkit/05-ci-and-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/rvsvkit/05-ci-and-testing/</guid>
      <description>CI &amp;amp; Testing # This document defines the continuous-integration pipelines, smoke synthesis, functional regression, benchmarking, and gating thresholds for RVSvKit, consistent with the Overview and Module Inventory.</description>
      
    </item>
    
    <item>
      <title>04-packages-and-interfaces</title>
      <link>http://localhost:1313/posts/rvsvkit/04-packages-and-interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/rvsvkit/04-packages-and-interfaces/</guid>
      <description>Packages &amp;amp; Interfaces # This document outlines the shared packages and bus-interface abstractions for RVSvKit, consistent with the Overview and Module Inventory.</description>
      
    </item>
    
    <item>
      <title>03-coding-conventions</title>
      <link>http://localhost:1313/posts/rvsvkit/03-coding-conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/rvsvkit/03-coding-conventions/</guid>
      <description>Coding Conventions # This guide defines the SystemVerilog style and naming rules for RVSvKit, ensuring consistency with the Overview and Module Inventory.</description>
      
    </item>
    
    <item>
      <title>02-module-inventory</title>
      <link>http://localhost:1313/posts/rvsvkit/02-module-inventory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/rvsvkit/02-module-inventory/</guid>
      <description>Module Inventory # This document catalogs every leaf RTL block under modules/.</description>
      
    </item>
    
    <item>
      <title>01-overview</title>
      <link>http://localhost:1313/posts/rvsvkit/01-overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/rvsvkit/01-overview/</guid>
      <description>Overview # Welcome to RVSvKit, a lightweight, parameterized SystemVerilog library for building RISC-V–style pipelines and peripherals.</description>
      
    </item>
    
    <item>
      <title>Week 5</title>
      <link>http://localhost:1313/posts/learning-logs/week-5/</link>
      <pubDate>Fri, 20 Jun 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/learning-logs/week-5/</guid>
      <description>Week 5 Learning Log (June 16–20, 2025) # 1. Objectives # Library Documentation</description>
      
    </item>
    
    <item>
      <title>Week 4</title>
      <link>http://localhost:1313/posts/learning-logs/week-4/</link>
      <pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/learning-logs/week-4/</guid>
      <description>Week 4 Learning Log (June 9–13, 2025) # 1. Objectives # Literature Review &amp;amp; Blogging</description>
      
    </item>
    
    <item>
      <title>Week 3</title>
      <link>http://localhost:1313/posts/learning-logs/week-3/</link>
      <pubDate>Fri, 06 Jun 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/learning-logs/week-3/</guid>
      <description>Week 3 Learning Log (June 2–6, 2025) # 1. Objectives # ALU Implementation &amp;amp; Testing Design a simple 4-bit ALU using Vivado IP Integrator arithmetic blocks (alu_bd.</description>
      
    </item>
    
    <item>
      <title>Week 2</title>
      <link>http://localhost:1313/posts/learning-logs/week-2/</link>
      <pubDate>Fri, 30 May 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/learning-logs/week-2/</guid>
      <description>Week 2 Learning Log (May 26–30, 2025) # 1. Objectives # HDL Implementation &amp;amp; Simulation Implement and simulate the following combinational primitives: 4-bit Subtractor (subtractor4.</description>
      
    </item>
    
    <item>
      <title>Week 1</title>
      <link>http://localhost:1313/posts/learning-logs/week-1/</link>
      <pubDate>Fri, 23 May 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/learning-logs/week-1/</guid>
      <description>Week 1 Learning Log (May 19–23, 2025) # 1. Objectives # FPGA Architecture &amp;amp; Tools Understand FPGA internal architecture: CLBs (LUTs, muxes, flip-flops), on-chip SRAM/Block RAM Install and configure Vivado/Vitis 2022.</description>
      
    </item>
    
    <item>
      <title>Internship Timeline</title>
      <link>http://localhost:1313/posts/internship-timeline/</link>
      <pubDate>Tue, 20 May 2025 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/internship-timeline/</guid>
      <description>&lt;h2 class=&#34;relative group&#34;&gt;Motivation for the Internship: 
    &lt;div id=&#34;motivation-for-the-internship&#34; class=&#34;anchor&#34;&gt;&lt;/div&gt;
    
    &lt;span
        class=&#34;absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100&#34;&gt;
        &lt;a class=&#34;group-hover:text-primary-300 dark:group-hover:text-neutral-700&#34;
            style=&#34;text-decoration-line: none !important;&#34; href=&#34;#motivation-for-the-internship&#34; aria-label=&#34;Anchor&#34;&gt;#&lt;/a&gt;
    &lt;/span&gt;        
    
&lt;/h2&gt;
&lt;p&gt;I am passionate about forging a career in research and innovation within computer engineering. This internship offers a unique opportunity to translate my theoretical knowledge into hands-on expertise by designing and building a processor from the ground up.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/posts/computer-organization/access-bus-protocol/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/computer-organization/access-bus-protocol/</guid>
      <description>ABMA</description>
      
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/posts/computer-organization/mips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/computer-organization/mips/</guid>
      <description>MIPS (Microprocessor without Interlocked Pipeline Stages)
a classic RISC (Reduced Instruction Set Computer) architecture simplicity, efficiency, and ease of pipelining.</description>
      
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/posts/learning-logs/week-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/learning-logs/week-6/</guid>
      <description>mon, 23 june
calas meeting changed icarus simulation to use verilator instead, which included: writing sim_main.</description>
      
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/posts/rvsvkit/progress/to-do/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/rvsvkit/progress/to-do/</guid>
      <description>Clone &amp;amp; bootstrap git clone + initialize any submodules Install prerequisites: Verilator ≥4.</description>
      
    </item>
    
    <item>
      <title>555 Timers</title>
      <link>http://localhost:1313/posts/digital-logic-circuits/555-timers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/digital-logic-circuits/555-timers/</guid>
      <description>Definition # 555 timers is the most beloved and used integrated circuits, used mainly for timing and waveform generation.</description>
      
    </item>
    
    <item>
      <title>Bi-stable Flip Flop</title>
      <link>http://localhost:1313/posts/digital-logic-circuits/bistable-flip-flop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/digital-logic-circuits/bistable-flip-flop/</guid>
      <description>At the heart of an SRAM cell lies a bistable flip-flop, which is a circuit capable of holding one of two stable states: logic &amp;lsquo;0&amp;rsquo; or logic &amp;lsquo;1&amp;rsquo;.</description>
      
    </item>
    
    <item>
      <title>Configuration Logic Block</title>
      <link>http://localhost:1313/posts/digital-logic-circuits/clb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/digital-logic-circuits/clb/</guid>
      <description>The architecture of FPGAs rely heavily on Configuration Logic Blocks (CLBs).</description>
      
    </item>
    
    <item>
      <title>Data Type: Logic</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/logic-data-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/logic-data-type/</guid>
      <description>SystemVerilog introduces logic as a 4-state data type that can be assigned in initial, always, or always_comb blocks.</description>
      
    </item>
    
    <item>
      <title>Data Type: Nets</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/nets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/nets/</guid>
      <description>Nets model physical connections between drivers. When you have multiple drivers</description>
      
    </item>
    
    <item>
      <title>Data Types</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/data-types/</guid>
      <description>1. Net Types (4-state, driven by continuous assignments) # wire</description>
      
    </item>
    
    <item>
      <title>Debugging a Half-Adder Testbench: A Journey in Four Lessons</title>
      <link>http://localhost:1313/posts/system-verilog/practical-knowledge/debugging-a-half-adder-testbench/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/practical-knowledge/debugging-a-half-adder-testbench/</guid>
      <description>When I set out expecting a quick smoke test for my pure combinational half-adder in SystemVerilog, I expected it to be trivial.</description>
      
    </item>
    
    <item>
      <title>draft</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/confused-topics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/confused-topics/</guid>
      <description>ports getting and passing parameters fork … join definition of: non-zero simulation-time constructs ] so you can only choose output&amp;rsquo;s type (whether variable or net)</description>
      
    </item>
    
    <item>
      <title>DSP slices</title>
      <link>http://localhost:1313/posts/digital-logic-circuits/dsp-slices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/digital-logic-circuits/dsp-slices/</guid>
      <description>dedicated hardware blocks optimized for arithmetic-intensive operations—most notably multiplication and accumulation</description>
      
    </item>
    
    <item>
      <title>LUT</title>
      <link>http://localhost:1313/posts/digital-logic-circuits/luts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/digital-logic-circuits/luts/</guid>
      <description>Definition # Look up table is a memory. Instead of recomputing a circuit or a logic function every time, we compute and store in LUTs.</description>
      
    </item>
    
    <item>
      <title>Part 1: Introduction</title>
      <link>http://localhost:1313/posts/computer-organization/patterson--hennessy-2020/chapter-2/part-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/computer-organization/patterson--hennessy-2020/chapter-2/part-1/</guid>
      <description>The book uses top-down method, where they start from a notation that resembles some low level programming language and break it down until it is using the language of a real computer.</description>
      
    </item>
    
    <item>
      <title>Ports</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/ports/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/ports/</guid>
      <description>Every module or interface exposes a list of ports - points of connection where signal, handshakes or buses flow in and out.</description>
      
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/roadmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/roadmap/</guid>
      <description>Language Basics
1.1. Lexical conventions: identifiers, comments (//, /*…*/), white space</description>
      
    </item>
    
    <item>
      <title>Sequential access memories</title>
      <link>http://localhost:1313/posts/computer-organization/sequential-access-memories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/computer-organization/sequential-access-memories/</guid>
      <description></description>
      
    </item>
    
    <item>
      <title>SRAM</title>
      <link>http://localhost:1313/posts/digital-logic-circuits/sram/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/digital-logic-circuits/sram/</guid>
      <description>SRAMs are static memory. They are implemented using 6 transistors usually and because of that more expensive.</description>
      
    </item>
    
    <item>
      <title>Tasks vs Functions</title>
      <link>http://localhost:1313/posts/system-verilog/language-concepts/tasks-vs-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/system-verilog/language-concepts/tasks-vs-functions/</guid>
      <description>Both functions and tasks are subroutines that are reusable RTL or testbench codes.</description>
      
    </item>
    
    <item>
      <title>Understanding verilog</title>
      <link>http://localhost:1313/posts/digital-logic-circuits/verilog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/digital-logic-circuits/verilog/</guid>
      <description>Tips to Understand Verilog Code Faster # ✅ 1. Simulate Mentally in time steps # Ask yourself:</description>
      
    </item>
    
  </channel>
</rss>
